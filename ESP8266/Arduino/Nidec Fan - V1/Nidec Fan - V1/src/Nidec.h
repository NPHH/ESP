#ifndef _NIDEC_H_
#define _NIDEC_H_

#include <Arduino.h>

#include <os_type.h>


//#define DEBUG_NIDEC                                     1




/******************************************************************************************************************************
						
******************************************************************************************************************************/
#define FREQSW1                                         200

#define FREQSW2                                         240             //      240

#define FREQSW3                                         280             //      280  

#define MAXFREQ                                         460

#define PWMSTEP                                         20

/******************************************************************************************************************************
						
******************************************************************************************************************************/
#define FREQ_INC                                        1

#define FREQ_DEC                                        0

/******************************************************************************************************************************
						
******************************************************************************************************************************/
typedef enum
{
    MODE_RF                                             = 0,

    MODE_BUTTON                                         = 1,

    MODE_ADC                                            = 2,
}
MODE_CONTROL_t;

/******************************************************************************************************************************
						
******************************************************************************************************************************/

class NidecClass
{
/******************************************************************************************************************************
						
******************************************************************************************************************************/    
    private:
/******************************************************************************************************************************
						
******************************************************************************************************************************/
        MODE_CONTROL_t                                  Mode;  

        uint8_t                                         _PWMPin;      

        uint8_t                                         _BreakPin;  
/******************************************************************************************************************************
						
******************************************************************************************************************************/
        uint32_t                                        _Reload;

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        uint32_t                                        _CurrentFREQ;

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        uint32_t                                        _FREQ;

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        uint8_t                                         _FREQDir;

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        uint8_t                                         _State;

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        void                                            FREQ(uint32_t FREQ_);


/******************************************************************************************************************************
						
******************************************************************************************************************************/
    public:

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        void                                            Begin(uint8_t PWMPin, uint8_t BreakPin);

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        void                                            Start(uint32_t FREQ_);

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        void                                            Stop(void);

/******************************************************************************************************************************
						
******************************************************************************************************************************/
        void                                            HandlePWM(void);                

        void                                            HandleTICK(void);    




};

extern NidecClass NIDEC;










void ICACHE_RAM_ATTR TimerPWMFunc(void);

void ICACHE_RAM_ATTR TimerTickFunc(void);


#endif
